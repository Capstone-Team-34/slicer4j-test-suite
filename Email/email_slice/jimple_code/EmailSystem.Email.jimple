public class EmailSystem.Email extends java.lang.Object
{
    protected int id;
    protected java.lang.String subject;
    protected java.lang.String body;
    protected EmailSystem.Client 'from';
    protected java.lang.String 'to';
    static int emailCounter;
    protected boolean isEncrypted;
    protected int encryptionKey;
    protected boolean signed;
    protected int signkey;
    protected boolean isSignatureVerified;

    public void <init>(int)
    {
        int id;
        EmailSystem.Email this;

        this := @this: EmailSystem.Email;

        id := @parameter0: int;

        specialinvoke this.<java.lang.Object: void <init>()>();

        this.<EmailSystem.Email: int id> = id;

        return;
    }

    static EmailSystem.Email createEmail(EmailSystem.Client, java.lang.String, java.lang.String, java.lang.String)
    {
        int $stack6, $stack7;
        EmailSystem.Client 'from';
        EmailSystem.Email $stack5;
        java.lang.String 'to', subject, body;

        'from' := @parameter0: EmailSystem.Client;

        'to' := @parameter1: java.lang.String;

        subject := @parameter2: java.lang.String;

        body := @parameter3: java.lang.String;

        $stack5 = new EmailSystem.Email;

        $stack6 = <EmailSystem.Email: int emailCounter>;

        $stack7 = $stack6 + 1;

        <EmailSystem.Email: int emailCounter> = $stack7;

        specialinvoke $stack5.<EmailSystem.Email: void <init>(int)>($stack7);

        virtualinvoke $stack5.<EmailSystem.Email: void setEmailFrom(EmailSystem.Client)>('from');

        virtualinvoke $stack5.<EmailSystem.Email: void setEmailTo(java.lang.String)>('to');

        virtualinvoke $stack5.<EmailSystem.Email: void setEmailSubject(java.lang.String)>(subject);

        virtualinvoke $stack5.<EmailSystem.Email: void setEmailBody(java.lang.String)>(body);

        return $stack5;
    }

    boolean isReadable__before__encrypt()
    {
        EmailSystem.Email this;

        this := @this: EmailSystem.Email;

        return 1;
    }

    boolean isReadable__role__encrypt()
    {
        EmailSystem.Email this;
        boolean $stack1, $stack2;

        this := @this: EmailSystem.Email;

        $stack1 = virtualinvoke this.<EmailSystem.Email: boolean isEncrypted()>();

        if $stack1 != 0 goto label1;

        $stack2 = virtualinvoke this.<EmailSystem.Email: boolean isReadable__before__encrypt()>();

        return $stack2;

     label1:
        return 0;
    }

    boolean isReadable()
    {
        EmailSystem.Email this;
        boolean $stack1;

        this := @this: EmailSystem.Email;

        $stack1 = this.<EmailSystem.Email: boolean isEncrypted>;

        return $stack1;
    }

    static void printMail__before__encrypt(EmailSystem.Email)
    {
        boolean $stack24;
        java.lang.StringBuilder $stack1, $stack2, $stack4, $stack6, $stack7, $stack10, $stack12, $stack13, $stack15, $stack17, $stack18, $stack20, $stack22, $stack23, $stack25, $stack27, $stack28, $stack30;
        EmailSystem.Client $stack8;
        EmailSystem.Email msg;
        int $stack3, $stack9;
        java.lang.String $stack5, $stack11, $stack14, $stack16, $stack19, $stack21, $stack26, $stack29, $stack31;

        msg := @parameter0: EmailSystem.Email;

        $stack1 = new java.lang.StringBuilder;

        specialinvoke $stack1.<java.lang.StringBuilder: void <init>()>();

        $stack2 = virtualinvoke $stack1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("ID:  ");

        $stack3 = virtualinvoke msg.<EmailSystem.Email: int getId()>();

        $stack4 = virtualinvoke $stack2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($stack3);

        $stack5 = virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <EmailSystem.Util: void prompt(java.lang.String)>($stack5);

        $stack6 = new java.lang.StringBuilder;

        specialinvoke $stack6.<java.lang.StringBuilder: void <init>()>();

        $stack7 = virtualinvoke $stack6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("FROM: ");

        $stack8 = virtualinvoke msg.<EmailSystem.Email: EmailSystem.Client getEmailFrom()>();

        $stack9 = virtualinvoke $stack8.<EmailSystem.Client: int getId()>();

        $stack10 = virtualinvoke $stack7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($stack9);

        $stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <EmailSystem.Util: void prompt(java.lang.String)>($stack11);

        $stack12 = new java.lang.StringBuilder;

        specialinvoke $stack12.<java.lang.StringBuilder: void <init>()>();

        $stack13 = virtualinvoke $stack12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("TO: ");

        $stack14 = virtualinvoke msg.<EmailSystem.Email: java.lang.String getEmailTo()>();

        $stack15 = virtualinvoke $stack13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack14);

        $stack16 = virtualinvoke $stack15.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <EmailSystem.Util: void prompt(java.lang.String)>($stack16);

        $stack17 = new java.lang.StringBuilder;

        specialinvoke $stack17.<java.lang.StringBuilder: void <init>()>();

        $stack18 = virtualinvoke $stack17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("SUBJECT: ");

        $stack19 = virtualinvoke msg.<EmailSystem.Email: java.lang.String getEmailSubject()>();

        $stack20 = virtualinvoke $stack18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack19);

        $stack21 = virtualinvoke $stack20.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <EmailSystem.Util: void prompt(java.lang.String)>($stack21);

        $stack22 = new java.lang.StringBuilder;

        specialinvoke $stack22.<java.lang.StringBuilder: void <init>()>();

        $stack23 = virtualinvoke $stack22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("IS_READABLE ");

        $stack24 = virtualinvoke msg.<EmailSystem.Email: boolean isReadable()>();

        $stack25 = virtualinvoke $stack23.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($stack24);

        $stack26 = virtualinvoke $stack25.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <EmailSystem.Util: void prompt(java.lang.String)>($stack26);

        $stack27 = new java.lang.StringBuilder;

        specialinvoke $stack27.<java.lang.StringBuilder: void <init>()>();

        $stack28 = virtualinvoke $stack27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("BODY: ");

        $stack29 = virtualinvoke msg.<EmailSystem.Email: java.lang.String getEmailBody()>();

        $stack30 = virtualinvoke $stack28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack29);

        $stack31 = virtualinvoke $stack30.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <EmailSystem.Util: void prompt(java.lang.String)>($stack31);

        return;
    }

    static void printMail__role__encrypt(EmailSystem.Email)
    {
        EmailSystem.Email msg;
        java.lang.StringBuilder $stack1, $stack2, $stack4;
        java.lang.String $stack5;
        boolean $stack3;

        msg := @parameter0: EmailSystem.Email;

        staticinvoke <EmailSystem.Email: void printMail__before__encrypt(EmailSystem.Email)>(msg);

        $stack1 = new java.lang.StringBuilder;

        specialinvoke $stack1.<java.lang.StringBuilder: void <init>()>();

        $stack2 = virtualinvoke $stack1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("ENCRYPTED ");

        $stack3 = virtualinvoke msg.<EmailSystem.Email: boolean isEncrypted()>();

        $stack4 = virtualinvoke $stack2.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($stack3);

        $stack5 = virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <EmailSystem.Util: void prompt(java.lang.String)>($stack5);

        return;
    }

    static void printMail__before__sign(EmailSystem.Email)
    {
        EmailSystem.Email msg;
        boolean $stack1;

        msg := @parameter0: EmailSystem.Email;

        $stack1 = staticinvoke <tests.TestCommand: boolean get_ENCRYPT___()>();

        if $stack1 == 0 goto label1;

        staticinvoke <EmailSystem.Email: void printMail__role__encrypt(EmailSystem.Email)>(msg);

        goto label2;

     label1:
        staticinvoke <EmailSystem.Email: void printMail__before__encrypt(EmailSystem.Email)>(msg);

     label2:
        return;
    }

    static void printMail__role__sign(EmailSystem.Email)
    {
        EmailSystem.Email msg;
        int $stack8;
        java.lang.StringBuilder $stack1, $stack2, $stack4, $stack6, $stack7, $stack9;
        java.lang.String $stack5, $stack10;
        boolean $stack3;

        msg := @parameter0: EmailSystem.Email;

        staticinvoke <EmailSystem.Email: void printMail__before__sign(EmailSystem.Email)>(msg);

        $stack1 = new java.lang.StringBuilder;

        specialinvoke $stack1.<java.lang.StringBuilder: void <init>()>();

        $stack2 = virtualinvoke $stack1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("SIGNED ");

        $stack3 = virtualinvoke msg.<EmailSystem.Email: boolean isSigned()>();

        $stack4 = virtualinvoke $stack2.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($stack3);

        $stack5 = virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <EmailSystem.Util: void prompt(java.lang.String)>($stack5);

        $stack6 = new java.lang.StringBuilder;

        specialinvoke $stack6.<java.lang.StringBuilder: void <init>()>();

        $stack7 = virtualinvoke $stack6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("SIGNATURE ");

        $stack8 = virtualinvoke msg.<EmailSystem.Email: int getEmailSignKey()>();

        $stack9 = virtualinvoke $stack7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($stack8);

        $stack10 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <EmailSystem.Util: void prompt(java.lang.String)>($stack10);

        return;
    }

    static void printMail__before__verify(EmailSystem.Email)
    {
        EmailSystem.Email msg;
        boolean $stack1;

        msg := @parameter0: EmailSystem.Email;

        $stack1 = staticinvoke <tests.TestCommand: boolean get_SIGN___()>();

        if $stack1 == 0 goto label1;

        staticinvoke <EmailSystem.Email: void printMail__role__sign(EmailSystem.Email)>(msg);

        goto label2;

     label1:
        staticinvoke <EmailSystem.Email: void printMail__before__sign(EmailSystem.Email)>(msg);

     label2:
        return;
    }

    static void printMail__role__verify(EmailSystem.Email)
    {
        EmailSystem.Email msg;
        java.lang.StringBuilder $stack1, $stack2, $stack4;
        java.lang.String $stack5;
        boolean $stack3;

        msg := @parameter0: EmailSystem.Email;

        staticinvoke <EmailSystem.Email: void printMail__before__verify(EmailSystem.Email)>(msg);

        $stack1 = new java.lang.StringBuilder;

        specialinvoke $stack1.<java.lang.StringBuilder: void <init>()>();

        $stack2 = virtualinvoke $stack1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("SIGNATURE VERIFIED ");

        $stack3 = virtualinvoke msg.<EmailSystem.Email: boolean isSignatureVerified()>();

        $stack4 = virtualinvoke $stack2.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($stack3);

        $stack5 = virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <EmailSystem.Util: void prompt(java.lang.String)>($stack5);

        return;
    }

    static void printMail(EmailSystem.Email)
    {
        EmailSystem.Email msg;
        boolean $stack1;

        msg := @parameter0: EmailSystem.Email;

        $stack1 = staticinvoke <tests.TestCommand: boolean get_VERIFY___()>();

        if $stack1 == 0 goto label1;

        staticinvoke <EmailSystem.Email: void printMail__role__verify(EmailSystem.Email)>(msg);

        goto label2;

     label1:
        staticinvoke <EmailSystem.Email: void printMail__before__verify(EmailSystem.Email)>(msg);

     label2:
        return;
    }

    EmailSystem.Email cloneEmail(EmailSystem.Email)
    {
        java.lang.Error $stack6;
        EmailSystem.Email this, $stack4, msg;
        java.lang.Object $stack3;
        java.lang.CloneNotSupportedException $stack5;

        this := @this: EmailSystem.Email;

        msg := @parameter0: EmailSystem.Email;

     label1:
        $stack3 = virtualinvoke this.<java.lang.Object: java.lang.Object clone()>();

        $stack4 = (EmailSystem.Email) $stack3;

     label2:
        return $stack4;

     label3:
        $stack5 := @caughtexception;

        $stack6 = new java.lang.Error;

        specialinvoke $stack6.<java.lang.Error: void <init>(java.lang.String)>("Clone not supported");

        throw $stack6;

        catch java.lang.CloneNotSupportedException from label1 to label2 with label3;
    }

    EmailSystem.Client getEmailFrom()
    {
        EmailSystem.Client $stack1;
        EmailSystem.Email this;

        this := @this: EmailSystem.Email;

        $stack1 = this.<EmailSystem.Email: EmailSystem.Client 'from'>;

        return $stack1;
    }

    int getId()
    {
        int $stack1;
        EmailSystem.Email this;

        this := @this: EmailSystem.Email;

        $stack1 = this.<EmailSystem.Email: int id>;

        return $stack1;
    }

    java.lang.String getEmailSubject()
    {
        EmailSystem.Email this;
        java.lang.String $stack1;

        this := @this: EmailSystem.Email;

        $stack1 = this.<EmailSystem.Email: java.lang.String subject>;

        return $stack1;
    }

    java.lang.String getEmailTo()
    {
        EmailSystem.Email this;
        java.lang.String $stack1;

        this := @this: EmailSystem.Email;

        $stack1 = this.<EmailSystem.Email: java.lang.String 'to'>;

        return $stack1;
    }

    void setEmailBody(java.lang.String)
    {
        EmailSystem.Email this;
        java.lang.String value;

        this := @this: EmailSystem.Email;

        value := @parameter0: java.lang.String;

        this.<EmailSystem.Email: java.lang.String body> = value;

        return;
    }

    void setEmailFrom(EmailSystem.Client)
    {
        EmailSystem.Client value, $stack3;
        EmailSystem.Email this;
        java.lang.String $stack2;

        this := @this: EmailSystem.Email;

        value := @parameter0: EmailSystem.Client;

        $stack2 = value.<EmailSystem.Client: java.lang.String name>;

        $stack3 = staticinvoke <EmailSystem.Client: EmailSystem.Client createClient(java.lang.String)>($stack2);

        this.<EmailSystem.Email: EmailSystem.Client 'from'> = $stack3;

        return;
    }

    void setEmailSubject(java.lang.String)
    {
        EmailSystem.Email this;
        java.lang.String value;

        this := @this: EmailSystem.Email;

        value := @parameter0: java.lang.String;

        this.<EmailSystem.Email: java.lang.String subject> = value;

        return;
    }

    void setEmailTo(java.lang.String)
    {
        EmailSystem.Email this;
        java.lang.String value;

        this := @this: EmailSystem.Email;

        value := @parameter0: java.lang.String;

        this.<EmailSystem.Email: java.lang.String 'to'> = value;

        return;
    }

    java.lang.String getEmailBody()
    {
        EmailSystem.Email this;
        java.lang.String $stack1;

        this := @this: EmailSystem.Email;

        $stack1 = this.<EmailSystem.Email: java.lang.String body>;

        return $stack1;
    }

    boolean isEncrypted()
    {
        EmailSystem.Email this;
        boolean $stack1;

        this := @this: EmailSystem.Email;

        $stack1 = this.<EmailSystem.Email: boolean isEncrypted>;

        return $stack1;
    }

    void setEmailIsEncrypted(boolean)
    {
        EmailSystem.Email this;
        boolean value;

        this := @this: EmailSystem.Email;

        value := @parameter0: boolean;

        <tests.TestCommand: boolean ENCRYPT___> = value;

        this.<EmailSystem.Email: boolean isEncrypted> = value;

        return;
    }

    void setEmailEncryptionKey(int)
    {
        int value;
        EmailSystem.Email this;

        this := @this: EmailSystem.Email;

        value := @parameter0: int;

        this.<EmailSystem.Email: int encryptionKey> = value;

        return;
    }

    int getEmailEncryptionKey()
    {
        int $stack1;
        EmailSystem.Email this;

        this := @this: EmailSystem.Email;

        $stack1 = this.<EmailSystem.Email: int encryptionKey>;

        return $stack1;
    }

    void setEmailIsSigned(boolean)
    {
        EmailSystem.Email this;
        boolean value;

        this := @this: EmailSystem.Email;

        value := @parameter0: boolean;

        this.<EmailSystem.Email: boolean signed> = value;

        return;
    }

    void setEmailSignKey(int)
    {
        int value;
        EmailSystem.Email this;

        this := @this: EmailSystem.Email;

        value := @parameter0: int;

        this.<EmailSystem.Email: int signkey> = value;

        return;
    }

    boolean isSigned()
    {
        EmailSystem.Email this;
        boolean $stack1;

        this := @this: EmailSystem.Email;

        $stack1 = this.<EmailSystem.Email: boolean signed>;

        return $stack1;
    }

    int getEmailSignKey()
    {
        int $stack1;
        EmailSystem.Email this;

        this := @this: EmailSystem.Email;

        $stack1 = this.<EmailSystem.Email: int signkey>;

        return $stack1;
    }

    boolean isSignatureVerified()
    {
        EmailSystem.Email this;
        boolean $stack1;

        this := @this: EmailSystem.Email;

        $stack1 = this.<EmailSystem.Email: boolean isSignatureVerified>;

        return $stack1;
    }

    void setIsSignatureVerified(boolean)
    {
        EmailSystem.Email this;
        boolean value;

        this := @this: EmailSystem.Email;

        value := @parameter0: boolean;

        this.<EmailSystem.Email: boolean isSignatureVerified> = value;

        return;
    }

    static void <clinit>()
    {
        <EmailSystem.Email: int emailCounter> = 1;

        return;
    }
}
