public class MinePumpSystem.Actions extends java.lang.Object
{
    MinePumpSystem.Environment env;
    public MinePumpSystem.MinePump p;

    public void <init>()
    {
        MinePumpSystem.Actions this;
        MinePumpSystem.Environment $stack1, $stack3;
        MinePumpSystem.MinePump $stack2;

        this := @this: MinePumpSystem.Actions;

        specialinvoke this.<java.lang.Object: void <init>()>();

        $stack1 = new MinePumpSystem.Environment;

        specialinvoke $stack1.<MinePumpSystem.Environment: void <init>()>();

        this.<MinePumpSystem.Actions: MinePumpSystem.Environment env> = $stack1;

        $stack2 = new MinePumpSystem.MinePump;

        $stack3 = this.<MinePumpSystem.Actions: MinePumpSystem.Environment env>;

        specialinvoke $stack2.<MinePumpSystem.MinePump: void <init>(MinePumpSystem.Environment)>($stack3);

        this.<MinePumpSystem.Actions: MinePumpSystem.MinePump p> = $stack2;

        return;
    }

    public void waterRise()
    {
        MinePumpSystem.Actions this;
        MinePumpSystem.Environment $stack1;

        this := @this: MinePumpSystem.Actions;

        $stack1 = this.<MinePumpSystem.Actions: MinePumpSystem.Environment env>;

        virtualinvoke $stack1.<MinePumpSystem.Environment: void waterRise()>();

        return;
    }

    public void methaneChange()
    {
        MinePumpSystem.Actions this;
        MinePumpSystem.Environment $stack1;

        this := @this: MinePumpSystem.Actions;

        $stack1 = this.<MinePumpSystem.Actions: MinePumpSystem.Environment env>;

        virtualinvoke $stack1.<MinePumpSystem.Environment: void changeMethaneLevel()>();

        return;
    }

    public void stopSystem__before__stopCommand()
    {
        MinePumpSystem.Actions this;

        this := @this: MinePumpSystem.Actions;

        <tests.TestInterface: boolean actionExecuted> = 1;

        return;
    }

    public void stopSystem__role__stopCommand()
    {
        MinePumpSystem.Actions this;
        MinePumpSystem.MinePump $stack1;

        this := @this: MinePumpSystem.Actions;

        $stack1 = this.<MinePumpSystem.Actions: MinePumpSystem.MinePump p>;

        virtualinvoke $stack1.<MinePumpSystem.MinePump: void stopSystem()>();

        return;
    }

    public void stopSystem()
    {
        MinePumpSystem.Actions this;
        boolean $stack1;

        this := @this: MinePumpSystem.Actions;

        $stack1 = staticinvoke <tests.TestCommand: boolean get_STOPCOMMAND___()>();

        if $stack1 == 0 goto label1;

        virtualinvoke this.<MinePumpSystem.Actions: void stopSystem__role__stopCommand()>();

        goto label2;

     label1:
        virtualinvoke this.<MinePumpSystem.Actions: void stopSystem__before__stopCommand()>();

     label2:
        return;
    }

    void startSystem__before__startCommand()
    {
        MinePumpSystem.Actions this;

        this := @this: MinePumpSystem.Actions;

        <tests.TestInterface: boolean actionExecuted> = 1;

        return;
    }

    void startSystem__role__startCommand()
    {
        MinePumpSystem.Actions this;
        MinePumpSystem.MinePump $stack1;

        this := @this: MinePumpSystem.Actions;

        $stack1 = this.<MinePumpSystem.Actions: MinePumpSystem.MinePump p>;

        virtualinvoke $stack1.<MinePumpSystem.MinePump: void startSystem()>();

        return;
    }

    public void startSystem()
    {
        MinePumpSystem.Actions this;
        boolean $stack1;

        this := @this: MinePumpSystem.Actions;

        $stack1 = staticinvoke <tests.TestCommand: boolean get_STARTCOMMAND___()>();

        if $stack1 == 0 goto label1;

        virtualinvoke this.<MinePumpSystem.Actions: void startSystem__role__startCommand()>();

        goto label2;

     label1:
        virtualinvoke this.<MinePumpSystem.Actions: void startSystem__before__startCommand()>();

     label2:
        return;
    }

    public void timeShift()
    {
        MinePumpSystem.Actions this;
        MinePumpSystem.MinePump $stack1;

        this := @this: MinePumpSystem.Actions;

        $stack1 = this.<MinePumpSystem.Actions: MinePumpSystem.MinePump p>;

        virtualinvoke $stack1.<MinePumpSystem.MinePump: void timeShift()>();

        return;
    }

    java.lang.String getSystemState()
    {
        java.lang.String $stack2;
        MinePumpSystem.Actions this;
        MinePumpSystem.MinePump $stack1;

        this := @this: MinePumpSystem.Actions;

        $stack1 = this.<MinePumpSystem.Actions: MinePumpSystem.MinePump p>;

        $stack2 = virtualinvoke $stack1.<MinePumpSystem.MinePump: java.lang.String toString()>();

        return $stack2;
    }
}
